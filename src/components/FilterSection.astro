---
import reset from "../assets/reset.svg";
import Reset from "./svg/Reset.astro";
---

<section class="filters">
    <h4>FILTROS</h4>

    <div class="filters-select">
        <select class="filter-color">
            <option selected hidden value="">Color</option>
            <option value="1">ROJ</option>
            <option value="2">AMA</option>
            <option value="3">MOR</option>
            <option value="4">VER</option>
            <option value="5">AZU</option>
        </select>
        <select class="filter-type">
            <option selected hidden value="">Tipo</option>
            <option value="1">APOYO</option>
            <option value="2">DEFENSA</option>
            <option value="3">FÍSICO</option>
            <option value="4">ENERGÍA</option>
        </select>
        <select class="filter-rarity">
            <option selected hidden value="">Rareza</option>
            <option value="1">HERO</option>
            <option value="2">EXTREME</option>
            <option value="3">SPARKING</option>
            <option value="4">ULTRA</option>
        </select>
        <select class="filter-ll" hidden>
            <option selected hidden value="">Legends Limited</option>
            <option value="true">Si</option>
            <option value="false">No</option>
        </select>
        <button class="clear-filters">
            <Reset />
        </button>
    </div>
</section>

<script>
    const clearFiltersButton = document.querySelector<HTMLButtonElement>(".clear-filters");
    const characterCards = document.querySelectorAll<HTMLAnchorElement>("a.character-card");
    const filterByColor = document.querySelector<HTMLSelectElement>("select.filter-color");
    const filterByType = document.querySelector<HTMLSelectElement>("select.filter-type");
    const filterByRarity = document.querySelector<HTMLSelectElement>("select.filter-rarity");

    const filterIsLL = document.querySelector<HTMLSelectElement>(".filter-ll");

    let activeFilters: { color?: number; type?: number; rarity?: number; ll?: boolean } = {};

    filterIsLL?.addEventListener("change", (e) => {
        const selectedValue = (e.currentTarget as HTMLSelectElement).value;

        if (selectedValue == "true") activeFilters.ll = true;
        if (selectedValue == "false") activeFilters.ll = false;

        applyFilters();
    });

    filterByColor?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.color = selectedValue || undefined;

        const colorClass = `color-${selectedValue == 1 ? "red" : selectedValue == 2 ? "yel" : selectedValue == 3 ? "pur" : selectedValue == 4 ? "grn" : selectedValue == 5 ? "blu" : ""}`;

        const previousClass = document.documentElement.classList.value.match(/color-[a-z]+/);
        if (previousClass) {
            document.documentElement.classList.replace(previousClass[0], colorClass);
        } else {
            document.documentElement.classList.add(colorClass);
        }
        applyFilters();
    });

    filterByType?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.type = selectedValue || undefined;

        applyFilters();
    });

    filterByRarity?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.rarity = selectedValue || undefined;

        applyFilters();
    });

    function applyFilters(): void {
        characterCards.forEach((card) => {
            let shouldHide = false;

            if (activeFilters.color) {
                const color: number[] = JSON.parse(card.dataset.color!);
                if (!color.includes(activeFilters.color)) {
                    shouldHide = true;
                }
            }

            if (activeFilters.type) {
                const type: number = JSON.parse(card.dataset.type!);
                if (!(type == activeFilters.type)) {
                    shouldHide = true;
                }
            }

            if (activeFilters.rarity) {
                const rarity: number = JSON.parse(card.dataset.rarity!);
                if (!(rarity == activeFilters.rarity)) {
                    shouldHide = true;
                }
            }

            if (activeFilters.ll !== undefined) {
                const ll = JSON.parse(card.dataset.ll!) as boolean;
                if (ll !== activeFilters.ll) {
                    shouldHide = true;
                }
            }

            if (shouldHide) {
                card.classList.add("hidden");
            } else {
                card.classList.remove("hidden");
            }
        });
    }

    clearFiltersButton?.addEventListener("click", clearFilter);

    function clearFilter(): void {
        const previousClass = document.documentElement.classList.value.match(/color-[a-z]+/);
        if (previousClass) document.documentElement.classList.remove(previousClass[0]);

        activeFilters = {};
        filterIsLL!.value = "";
        filterByColor!.value = "";
        filterByType!.value = "";
        filterByRarity!.value = "";
        applyFilters();
    }
</script>

<style>
    :root {
        --color-1: var(--bg-second);
        --color-2: var(--bg-third);
    }

    h4 {
        font-weight: 600;
        font-size: 1rem;
    }

    .filters {
        display: flex;
        flex-direction: column;
        padding: 1rem;
        gap: 1rem;
        position: relative;
    }

    .filters-select {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
    }

    select {
        border-radius: var(--round-md);
        text-align: center;
        padding: 0.75rem;
        font-size: 1rem;
        background: none;
        background-color: var(--color-1);
        border: 2px solid var(--color-2);
        color: #f1f1f1;
        outline: none;
        transition:
            background 0.15s ease-in-out,
            border 0.15s ease-in-out;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    option {
        display: block;
        text-align: center;
        background-color: #333333;
    }

    button {
        cursor: pointer;
        aspect-ratio: 1;
        border-radius: var(--round-md);
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f1f1f1;
        transition: background-color 0.3s ease;
        position: absolute;
        top: 10%;
        right: 2.5rem;

        &:hover {
            background-color: #e0e0e0;
        }

        svg {
            width: 50%;
            height: 50%;
            object-fit: cover;
            transition: transform 0.3s ease-in-out;
        }

        &:hover svg {
            transform: rotate(0.75turn);
        }
    }

    @media (min-width: 600px) {
        .filters {
            padding: 1rem 2rem;
        }

        .filters-select {
            flex-direction: row;
            gap: 0.5rem;
        }
    }

    @media (min-width: 769px) {
        h4 {
            font-size: 1.25rem;
        }
        button {
            position: relative;
            top: unset;
            right: unset;
            align-self: center;
            margin-left: 0.5rem;
            padding: 0.5rem;
            border-radius: var(--round-md);

            svg {
                width: 70%;
                height: 70%;
            }
        }
    }
</style>
