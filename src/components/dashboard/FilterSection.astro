---
import Reset from "../svg/Reset.astro";
---

<section class="filters">
    <h4>FILTROS</h4>

    <div class="filters-select">
        <select class="filter-color">
            <option selected hidden value="">Color</option>
            <option value="1">ROJ</option>
            <option value="2">AMA</option>
            <option value="3">MOR</option>
            <option value="4">VER</option>
            <option value="5">AZU</option>
        </select>
        <select class="filter-type">
            <option selected hidden value="">Tipo</option>
            <option value="1">APOYO</option>
            <option value="2">DEFENSA</option>
            <option value="3">FÍSICO</option>
            <option value="4">ENERGÍA</option>
        </select>
        <select class="filter-rarity">
            <option selected hidden value="">Rareza</option>
            <option value="1">HERO</option>
            <option value="2">EXTREME</option>
            <option value="3">SPARKING</option>
            <option value="4">ULTRA</option>
        </select>
        <button class="clear-filters">
            <Reset />
        </button>
    </div>
</section>

<script>
    const clearFiltersButton = document.querySelector<HTMLButtonElement>(".clear-filters");
    const characterCards = document.querySelectorAll<HTMLTableRowElement>("tr.character-information");
    const filterByColor = document.querySelector<HTMLSelectElement>("select.filter-color");
    const filterByType = document.querySelector<HTMLSelectElement>("select.filter-type");
    const filterByRarity = document.querySelector<HTMLSelectElement>("select.filter-rarity");

    let activeFilters: { color?: number; type?: number; rarity?: number } = {};

    filterByColor?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.color = selectedValue || undefined;

        applyFilters();
    });

    filterByType?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.type = selectedValue || undefined;

        applyFilters();
    });

    filterByRarity?.addEventListener("change", (e) => {
        const selectedValue = parseInt((e.currentTarget as HTMLSelectElement).value);
        activeFilters.rarity = selectedValue || undefined;

        applyFilters();
    });

    function applyFilters(): void {
        characterCards.forEach((card) => {
            let shouldHide = false;

            if (activeFilters.color) {
                const color: number[] = JSON.parse(card.dataset.color!);
                if (!color.includes(activeFilters.color)) {
                    shouldHide = true;
                }
            }

            if (activeFilters.type) {
                const type: number = JSON.parse(card.dataset.type!);
                if (!(type == activeFilters.type)) {
                    shouldHide = true;
                }
            }

            if (activeFilters.rarity) {
                const rarity: number = JSON.parse(card.dataset.rarity!);
                if (!(rarity == activeFilters.rarity)) {
                    shouldHide = true;
                }
            }

            if (shouldHide) {
                card.hidden = true;
            } else {
                card.hidden = false;
            }
        });
    }

    clearFiltersButton?.addEventListener("click", clearFilter);

    function clearFilter(): void {
        const previousClass = document.documentElement.classList.value.match(/color-\d+/);
        if (previousClass) document.documentElement.classList.remove(previousClass[0]);

        activeFilters = {};
        filterByColor!.value = "";
        filterByType!.value = "";
        filterByRarity!.value = "";
        applyFilters();
    }
</script>
