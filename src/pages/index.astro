---
import RenderCard from "../components/RenderCard.astro";
import Layout from "../layouts/Layout.astro";
import type { SummaryCharacter } from "../types/summary.formated.character";
import { BASE_API_ENDPOINTS, BASE_API_URL } from "../utils/API";
import FilterSection from "../components/FilterSection.astro";

async function getData() {
	try {
		const response = await fetch(`${BASE_API_URL}${BASE_API_ENDPOINTS.all}`, {
			method: "GET",
			redirect: "manual"
		});

		if (response.status >= 300 && response.status < 400) {
			const location = response.headers.get("Location");
			throw new Error(`Redirection detected: ${location}`);
		}

		if (!response.ok) {
			throw new Error(`HTTP error! Status: ${response.status}`);
		}

		const json: SummaryCharacter[] = await response.json();
		return json;
	} catch (error) {
		console.error("Fetch error:", error);
	}
}
const characters = await getData();
---

<Layout Title="Personajes">
	<FilterSection />

	<section class="characters-render">
		{characters && characters.map((e) => <RenderCard char={e} />)}
	</section>
</Layout>

<style>
	section.characters-render {
		padding: 1rem 2rem;
		height: inherit;
		width: 100%;
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 0 16px;
	}

	@media (min-width: 600px) {
		section.characters-render {
			grid-template-columns: repeat(3, 1fr);
		}
	}

	@media (min-width: 1000px) {
		section.characters-render {
			grid-template-columns: repeat(5, 1fr);
		}
	}

	@media (min-width: 1200px) {
		section.characters-render {
			grid-template-columns: repeat(6, 1fr);
		}
	}
</style>
