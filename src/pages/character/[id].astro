---
import Layout from "../../layouts/Layout.astro";
import { CUT_API_URL, BASE_API_ENDPOINTS, BASE_API_URL, ICO_API_URL } from "../../utils/API";
import type { FormatedCharacter, Tag } from "../../types/formated.character";
import { COLORS, RARITY, RARITY_BIG } from "../../utils/atributes";
import RenderArt from "../../components/character/RenderArt.astro";
import RenderMain from "../../components/RenderMain.astro";
import RenderUniques from "../../components/RenderUniques.astro";
import ZenkaiButton from "../../components/button/ZenkaiButton.astro";
import TransformButton from "../../components/button/TransformButton.astro";
import TagButton from "../../components/button/TagButton.astro";
import FusionButton from "../../components/button/FusionButton.astro";
import { getCharacter } from "../../services/getData";

const { id } = Astro.params;

const character = await getCharacter(parseInt(id!));
const { abilities, arts, zenkaiAbilities, zenkaiArts } = character;

const color = COLORS[character.color[0]._id];
const rar = RARITY[character.rarity._id];
const rarity = RARITY_BIG[character.rarity._id];
---

<Layout ICO={`${ICO_API_URL}${id}.webp`} Title={`${character._id} - ${character.name}`}>
    <div class={`character ${color}`}>
        <section class={`character-banner ${color}`} data-stage="first">
            <img class="bchacut st on" src={`${CUT_API_URL}${id}.webp`} alt="" />
            {(character.transformable || character.switch) && <img class="bchacut nd off" src={`${CUT_API_URL}${id}2.webp`} />}
            {(character.transformable || character.switch) && <img class="bchacut rd off" src={`${CUT_API_URL}${id}3.webp`} />}

            <article class="rarity-lf">
                <img class="character-rarity" src={`/rarity/${rarity}.webp`} alt="Rareza del personaje" />
                {character.lf && <img class="lf" src="/props/LegendsLimited.webp" alt="El personaje es LEGENDS LIMITED" />}
            </article>

            <aside class="buttons">
                {character.zenkai && <ZenkaiButton />}
                {character.switch && <TagButton />}
                {character.transformable && <TransformButton />}
                {character.fusion && <FusionButton />}
            </aside>

            <article class="text">
                <img class="character-element" src={`/element/${color}1.webp`} alt="Afinidad del personaje" />
                <h3>{character._id}</h3>
                <h2>{character.name}</h2>
            </article>
        </section>
        {
            character.abilities.ultra && (
                <section class="character-ability">
                    <h2>Habilidad ULTRA</h2>
                    <article class="ability ultra">
                        <h3>{character.abilities.ultra[0][0]}</h3>
                        <pre>{character.abilities.ultra[0][1]}</pre>
                    </article>
                </section>
            )
        }
        <section class="character-ability">
            <h2>Habilidad principal</h2>
            <RenderMain
                abilities={abilities}
                zenkaiAbilities={zenkaiAbilities}
                character={{
                    switch: character.switch,
                    transformable: character.transformable,
                    zenkai: character.zenkai,
                    fusion: character.fusion
                }}
            />
        </section>
        <section class="character-ability">
            <h2>Habilidades unicas</h2>
            <RenderUniques
                abilities={abilities}
                zenkaiAbilities={zenkaiAbilities}
                character={{
                    switch: character.switch,
                    transformable: character.transformable,
                    zenkai: character.zenkai,
                    fusion: character.fusion
                }}
            />
        </section>
        <section class="character-ability">
            <h2>Habilidad Z</h2>
            <article class="ability">
                <section class="button-tab">
                    <input class="z-button" type="button" value="I" />
                    <input class="z-button" type="button" value="II" />
                    <input class="z-button" type="button" value="III" />
                    <input class="z-button" type="button" value="IV" />
                </section>

                {character.abilities.zAbility.map((a, i) => <pre class={`z z-${i}`}>{a}</pre>)}
            </article>
        </section>

        {
            character.abilities.limitedZ && (
                <section class="character-ability">
                    <h2>Habilidad Z Limited</h2>
                    <article class="ability">
                        <section class="button-tab">
                            <input class="z-limited-button" type="button" value="I" />
                            <input class="z-limited-button" type="button" value="II" />
                            <input class="z-limited-button" type="button" value="III" />
                            <input class="z-limited-button" type="button" value="IV" />
                        </section>

                        {character.abilities.limitedZ.map((a, i) => (
                            <pre class={`z-limited z-limited-${i}`}>{a}</pre>
                        ))}
                    </article>
                </section>
            )
        }

        {
            character.zenkaiAbilities?.zenkaiAbility && (
                <section class="character-ability zenkai">
                    <h2>Habilidad Z Limited</h2>
                    <article class="ability">
                        <section class="button-tab">
                            <input class="zenkai-ability-button" type="button" value="I" />
                            <input class="zenkai-ability-button" type="button" value="II" />
                            <input class="zenkai-ability-button" type="button" value="III" />
                            <input class="zenkai-ability-button" type="button" value="IV" />
                        </section>

                        {character.zenkaiAbilities.zenkaiAbility.map((a, i) => (
                            <pre class={`zenkai-ability zenkai-ability-${i}`}>{a}</pre>
                        ))}
                    </article>
                </section>
            )
        }
    </div>
</Layout>

<script>
    import {
        setToggleOff,
        isOff,
        isOn,
        setToggleOn,
        setToggleSelectedOff,
        setToggleSelectedOn,
        toggleOffList,
        toggleOnList,
        toggleSelectedOffList
    } from "../../utils/characters_page.functions";

    const ndZenkai = document.querySelectorAll(".nd-zenkai");
    const stZenkai = document.querySelectorAll(".st-zenkai");
    const st = document.querySelectorAll(".st");
    const nd = document.querySelectorAll(".nd");
    const rd = document.querySelectorAll(".rd");

    const zenkaiAbilitySection = document.querySelector(".character-ability.zenkai");

    const zAbility = document.querySelectorAll(".z");
    const zAbilityButton = document.querySelectorAll<HTMLInputElement>(".z-button");

    const zLimited = document.querySelectorAll(".z-limited");
    const ZLimitedButton = document.querySelectorAll<HTMLInputElement>(".z-limited-button");

    const zenkaiAbility = document.querySelectorAll(".zenkai-ability");
    const zenkaiAbilityButton = document.querySelectorAll<HTMLInputElement>(".zenkai-ability-button");

    if (zenkaiAbilitySection) setToggleOff(zenkaiAbilitySection as HTMLElement);

    toggleOffList(zAbility);
    toggleOffList(zLimited);
    toggleOffList(zenkaiAbility);

    setToggleOn(zAbility[0] as HTMLElement);
    if (zLimited.length > 0) setToggleOn(zLimited[0] as HTMLElement);
    if (zenkaiAbility.length > 0) setToggleOn(zenkaiAbility[0] as HTMLElement);

    setToggleSelectedOn(zAbilityButton[0]);
    if (ZLimitedButton.length > 0) setToggleSelectedOn(ZLimitedButton[0]);
    if (zenkaiAbilityButton.length > 0) setToggleSelectedOn(zenkaiAbilityButton[0]);

    zAbilityButton?.forEach((button, i) => {
        button.addEventListener("click", (e: MouseEvent) => {
            toggleOffList(zAbility);
            toggleSelectedOffList(zAbilityButton);
            setToggleSelectedOn(button);
            setToggleOn(zAbility[i] as HTMLElement);
        });
    });

    ZLimitedButton?.forEach((button, i) => {
        button.addEventListener("click", (e: MouseEvent) => {
            toggleOffList(zLimited);
            toggleSelectedOffList(ZLimitedButton);
            setToggleSelectedOn(button);
            setToggleOn(zLimited[i] as HTMLElement);
        });
    });

    zenkaiAbilityButton?.forEach((button, i) => {
        button.addEventListener("click", (e: MouseEvent) => {
            toggleOffList(zenkaiAbility);
            toggleSelectedOffList(zenkaiAbilityButton);
            setToggleSelectedOn(button);
            setToggleOn(zenkaiAbility[i] as HTMLElement);
        });
    });

    const zenkaiToggle = document.querySelector<HTMLDivElement>(".zenkai-toggle");
    const transformToggle = document.querySelector<HTMLDivElement>(".transform-toggle");
    const tagToggle = document.querySelector<HTMLDivElement>(".tag-toggle");
    const fusionToggle = document.querySelector<HTMLDivElement>(".fusion-toggle");

    zenkaiToggle?.addEventListener("click", (e: MouseEvent): void => handleZenkaiToggle(e));
    transformToggle?.addEventListener("click", (e: MouseEvent): void => handleTransformToggle(e));
    tagToggle?.addEventListener("click", (e: MouseEvent): void => handleTagToggle(e));
    fusionToggle?.addEventListener("click", (e: MouseEvent): void => handleFusionToggle(e));

    function handleZenkaiToggle(e: MouseEvent): void {
        const target = e.currentTarget as HTMLElement;

        if (isOff(target)) {
            if (isOff(transformToggle) && isOff(tagToggle)) {
                toggleOffList(st);
                toggleOnList(stZenkai);
                st[0]?.classList.remove("off");
                st[0]?.classList.add("on");
            } else {
                toggleOffList(nd);
                toggleOnList(ndZenkai);
                nd[0]?.classList.remove("off");
                nd[0]?.classList.add("on");
            }
            setToggleOn(target);
            setToggleOn(zenkaiAbilitySection as HTMLElement);
        } else {
            if (isOff(transformToggle) && isOff(tagToggle)) {
                toggleOffList(stZenkai);
                toggleOnList(st);
            } else {
                toggleOffList(ndZenkai);
                toggleOnList(nd);
            }
            setToggleOff(target);
            setToggleOff(zenkaiAbilitySection as HTMLElement);
        }
    }

    function handleTransformToggle(e: MouseEvent): void {
        const target = e.currentTarget as HTMLElement;

        if (isOff(target)) {
            if (isOn(zenkaiToggle)) {
                st[0]?.classList.add("off");
                st[0]?.classList.remove("on");
                toggleOffList(stZenkai);
                toggleOnList(ndZenkai);
                nd[0]?.classList.remove("off");
                nd[0]?.classList.add("on");
            } else {
                toggleOffList(st);
                toggleOnList(nd);
            }
            setToggleOn(target);
        } else {
            if (isOn(zenkaiToggle)) {
                toggleOffList(ndZenkai);
                nd[0]?.classList.add("off");
                nd[0]?.classList.remove("on");
                toggleOnList(stZenkai);
                st[0]?.classList.remove("off");
                st[0]?.classList.add("on");
            } else {
                toggleOffList(nd);
                toggleOnList(st);
            }
            setToggleOff(target);
        }
    }

    function handleTagToggle(e: MouseEvent): void {
        const target = e.currentTarget as HTMLElement;

        if (isOff(target)) {
            if (isOn(transformToggle)) {
                toggleOffList(nd);
                toggleOnList(rd);
            } else {
                toggleOffList(st);
                toggleOnList(nd);
            }
            setToggleOn(target);
            if (fusionToggle) setToggleOff(fusionToggle as HTMLElement);
            toggleOffList(rd);
        } else {
            if (isOn(transformToggle)) {
                toggleOffList(rd);
                toggleOnList(nd);
            } else {
                toggleOffList(nd);
                toggleOnList(st);
            }
            setToggleOff(target);
        }
    }

    function handleFusionToggle(e: MouseEvent): void {
        const target = e.currentTarget as HTMLElement;

        if (isOff(target)) {
            toggleOffList(st);
            toggleOffList(nd);
            toggleOnList(rd);
            setToggleOn(target);
            setToggleOff(tagToggle as HTMLElement);
        } else {
            toggleOffList(rd);
            toggleOnList(st);
            setToggleOff(target);
        }
    }
</script>

<style is:global>
    :root {
        --br: 16px;
    }

    .character {
        width: 100%;

        &.RED {
            section.character-ability {
                article.ability {
                    input[type="button"].selected,
                    pre.z,
                    pre.zenkai-ability,
                    pre.z-limited {
                        background-color: rgba(255, 0, 0, 0.048);
                        outline: 1px solid rgba(255, 0, 0, 0.28);
                    }
                }
            }
        }
        &.YEL {
            section.character-ability {
                article.ability {
                    input[type="button"].selected,
                    pre.z,
                    pre.zenkai-ability,
                    pre.z-limited {
                        background-color: rgba(255, 255, 0, 0.048);
                        outline: 1px solid rgba(255, 255, 0, 0.28);
                    }
                }
            }
        }
        &.PUR {
            section.character-ability {
                article.ability {
                    input[type="button"].selected,
                    pre.z,
                    pre.zenkai-ability,
                    pre.z-limited {
                        background-color: rgba(98, 0, 255, 0.048);
                        outline: 1px solid rgba(98, 0, 255, 0.28);
                    }
                }
            }
        }
        &.GRN {
            section.character-ability {
                article.ability {
                    input[type="button"].selected,
                    pre.z,
                    pre.zenkai-ability,
                    pre.z-limited {
                        background-color: rgba(21, 255, 0, 0.048);
                        outline: 1px solid rgba(21, 255, 0, 0.28);
                    }
                }
            }
        }
        &.BLU {
            section.character-ability {
                article.ability {
                    input[type="button"].selected,
                    pre.z,
                    pre.zenkai-ability,
                    pre.z-limited {
                        background-color: rgba(0, 204, 255, 0.048);
                        outline: 1px solid rgba(0, 204, 255, 0.28);
                    }
                }
            }
        }

        section.character-ability {
            h2 {
                font-size: 1.25rem;
                margin: 0 var(--br);
                margin-bottom: 0.25rem;
            }

            article.ability {
                padding: 0 var(--br);

                h3 {
                    margin: 0 0 0.25rem 0;
                    font-size: 1rem;
                    font-weight: 600;
                    color: #e2e2e2;
                }
                pre {
                    margin-bottom: 1rem;
                    font-size: 0.7rem; /* Estilo base para móvil */

                    &.z,
                    &.z-limited,
                    &.zenkai-ability {
                        padding: 1rem;
                        border-radius: 0.5rem;
                    }
                }

                section.button-tab {
                    display: flex;
                    width: 100%;
                    margin: 0.5rem 0 0.75rem 0;
                    gap: 0.5rem;

                    input[type="button"] {
                        padding: 0.5rem 1rem;
                        text-align: center;
                        font-weight: 600;
                        transition:
                            background 0.26s ease-in-out,
                            color 0.22s ease-in-out;
                        background-color: rgb(66, 66, 66);
                        color: #f1f1f1;
                        cursor: pointer;
                        border-radius: 0.25rem;
                    }
                }
            }
        }

        .character-banner {
            display: flex;
            position: relative;
            outline: 1px solid;
            margin-bottom: 1rem;

            img:not(img.bchacut),
            article.text,
            .buttons,
            .rarity-lf {
                position: absolute;
            }

            article.rarity-lf {
                top: var(--br);
                display: flex;
                flex-direction: column;

                .character-rarity {
                    position: relative;
                    aspect-ratio: 512/128;
                    width: 40%;
                    left: var(--br);
                }

                .lf {
                    position: relative;
                    width: 30%;
                    left: 7.5%;
                }
            }

            .buttons {
                right: 4px;
                top: 50%;
                transform: translateY(-50%);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;

                .button {
                    width: 60%;
                    max-width: 72px;
                    aspect-ratio: 1;
                    height: auto;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    transition:
                        transform 0.2s ease-in-out,
                        filter 0.2s ease-in-out;
                    cursor: pointer;

                    &:hover {
                        transform: scale(1.05);
                    }

                    &.off {
                        filter: grayscale();
                    }

                    img {
                        position: relative;
                        width: 100%;
                        object-fit: contain;
                    }
                }
            }

            article.text {
                display: flex;
                flex-direction: column;
                left: var(--br);
                bottom: var(--br);
                line-height: 1.1;

                .character-element {
                    display: block;
                    position: relative;
                    left: -8px;
                    top: -8px;
                    width: 10vw;
                    height: auto;
                    aspect-ratio: 96/52;
                }

                h2 {
                    font-size: 1.25rem;
                    line-height: 1;
                }
                h3 {
                    font-size: 0.75rem;
                    font-weight: 500;
                    line-height: 1;
                }
            }

            &.PUR {
                background-image: conic-gradient(from 0deg, #6926af 5%, #6826af4f, transparent, transparent, #6826af3f, #6926af);
                outline-color: #6926af;
            }

            &.RED {
                background-image: conic-gradient(from 0deg, #dc2121 5%, #dc21215d, transparent, transparent, #dc212146, #dc2121);
                outline-color: #dc2121;
            }

            &.GRN {
                background-image: conic-gradient(from 0deg, #16af15 5%, #15af1549, transparent, transparent, #15af153f, #16af15);
                outline-color: #16af15;
            }

            &.BLU {
                background-image: conic-gradient(from 0deg, #0c6bf2 5%, #0c6cf256, transparent, transparent, #0c6cf23d, #0c6bf2);
                outline-color: #0c6bf2;
            }
            &.YEL {
                background-image: conic-gradient(from 0deg, #f4e61d 5%, #f4e61d4f, transparent, transparent, #f4e61d3a, #f4e61d);
                outline-color: #f4e61d;
            }
        }
    }

    pre {
        white-space: pre-line;
        word-wrap: break-word;
    }

    .off {
        display: none;
    }

    .on {
        display: block;
    }

    @media (max-width: 769px) {
        .character-banner {
            height: 10rem;
            width: 100%;
            aspect-ratio: 4/1;

            .bchacut {
                width: 100%;
                aspect-ratio: 4/1;
                object-fit: cover;
            }
        }
    }

    @media (min-width: 769px) {
        .character {
            .character-banner {
                border-radius: 1rem;
                height: 100%;
                width: 100%;
                aspect-ratio: 4/1;

                .bchacut {
                    width: 100%;
                    aspect-ratio: 4/1;
                    object-fit: contain;
                }

                article.rarity-lf {
                    .character-rarity {
                        width: 50%;
                    }

                    .lf {
                        width: 30%;
                        left: 12.5%;
                    }
                }

                .buttons {
                    right: 16px;

                    .button {
                        width: 100%;
                    }
                }

                article.text {
                    line-height: 1;

                    .character-element {
                        left: -4px;
                        top: 0;
                        width: 4vw;
                    }

                    h2 {
                        font-size: 2rem;
                        line-height: 1;
                    }
                    h3 {
                        font-size: 1.25rem;
                        font-weight: 500;
                        line-height: 1;
                    }
                }
            }

            section.character-ability {
                h2 {
                    font-size: 1.5rem;
                }

                article.ability {
                    h3 {
                        font-size: 1.25rem;
                    }
                    pre {
                        font-size: 1rem;
                    }

                    section.button-tab {
                        input[type="button"] {
                            font-size: 1rem;
                        }
                    }
                }
            }
        }
    }

    @media (min-width: 1024px) {
        .character {
            .character-banner {
                article.text {
                    line-height: 1;

                    .character-element {
                        left: -12px;
                        top: -4px;
                        width: 4vw;
                    }
                }
            }
        }
    }
</style>
