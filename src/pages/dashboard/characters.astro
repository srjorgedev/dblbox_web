---
import DashLayout from "../../layouts/DashLayout.astro";
import { getSummaryCharacters } from "../../services/getData";
import { COLORS, RARITY } from "../../utils/atributes";
import InfoCard from "../../components/dashboard/InfoCard.astro";
import FilterSection from "../../components/dashboard/FilterSection.astro";
import TBody from "../../components/dashboard/TBody.astro";

const role = (Astro.cookies.get("role") || {})?.value;
const token = (Astro.cookies.get("token") || {})?.value;

if (!role || !token) return Astro.redirect("/auth/login");

const characters = await getSummaryCharacters();
const heroLength = characters.filter((char) => char.rarity._id === 1).length;
const exLength = characters.filter((char) => char.rarity._id === 2).length;
const spLength = characters.filter((char) => char.rarity._id === 3).length;
const ulLength = characters.filter((char) => char.rarity._id === 4).length;
---

<DashLayout selected={1}>
    <header class="dashboard-header">
        <h1>PERSONAJES</h1>
    </header>

    <section class="stats-grid">
        <InfoCard Title="Total" Amount={characters.length} />
        <InfoCard Title="HERO" Amount={heroLength} />
        <InfoCard Title="EXTREME" Amount={exLength} />
        <InfoCard Title="SPARKING" Amount={spLength} />
        <InfoCard Title="ULTRA" Amount={ulLength} />
    </section>

    <FilterSection />

    <section class="table-container">
        <table>
            <thead>
                <tr>
                    <th scope="column">ID</th>
                    <th scope="column">NUM</th>
                    <th scope="column">Nombre</th>
                    <th scope="column">Color</th>
                    <th scope="column">Tipo</th>
                    <th scope="column">Capitulo</th>
                    <th scope="column">Etiquetas</th>
                    <th scope="column">Rareza</th>
                    <th scope="column">LF</th>
                    <th scope="column">Transform</th>
                    <th scope="column">Dual</th>
                    <th scope="column">Fusionable</th>
                    <th scope="column">Zenkai</th>
                    <th scope="column">Acci√≥n</th>
                </tr>
            </thead>
            <TBody characters={characters} />
        </table>
    </section>
</DashLayout>

<style is:global>
    /* Dashboard Layout */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .dashboard-header h1 {
        font-size: 2rem;
        font-weight: 600;
        color: var(--bg-main);
        line-height: 1;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    /* Table Container */
    .table-container {
        background: #f1f1f1;
        border-radius: 0.75rem;
        box-shadow:
            0 1px 3px 0 rgb(0 0 0 / 0.1),
            0 1px 2px -1px rgb(0 0 0 / 0.1);
        overflow: hidden;
    }

    /* Table Styles */
    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.875rem;
        text-align: left;
    }

    /* Header */
    thead {
        background-color: var(--bg-main);
        color: white;
    }

    th {
        padding: 0.75rem 1rem;
        font-weight: 500;
        border-bottom: 1px solid var(--bg-rd);
        white-space: nowrap;
        text-align: left;
    }

    /* Body */
    td {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--bg-rd);
        vertical-align: middle;
    }

    tbody tr:hover {
        background-color: var(--bg-rd-1);
    }

    thead {
        /* Column Widths */
        th:nth-child(1) {
            width: 120px;
        } /* ID */
        th:nth-child(2) {
            width: 80px;
        } /* NUM */
        th:nth-child(3) {
            width: 180px;
        } /* Name */
        th:nth-child(7) {
            width: 200px;
        } /* Tags */

        th:nth-child(8),
        th:nth-child(9),
        th:nth-child(11) {
            width: 60px;
        }
        th:nth-child(10),
        th:nth-child(12),
        th:nth-child(13) {
            width: 90px;
        }
    }

    /* Text Truncation */
    .chapter,
    .character-name {
        max-width: 200px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .character-name {
        max-width: 160px;
    }

    /* Tags */
    .tag-container {
        height: 100%;
        gap: 0.5rem;
        overflow: hidden;
        max-width: 100%;
        white-space: nowrap;
    }

    /* Tags */
    span.tag {
        align-items: center;
        padding: 0.25rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 500;
        background-color: rgba(234, 234, 234, 0.5);
        border: 1px solid rgb(219, 219, 219);
        color: rgb(131, 131, 131);

        display: inline-block;
        max-width: 90px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Ejemplo de variantes de color */
    span.YEL {
        background-color: rgba(234, 179, 8, 0.1);
        border: 1px solid rgba(234, 179, 8, 0.2);
        color: rgb(161, 98, 7);
    }

    span.RED {
        background-color: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.2);
        color: rgb(185, 28, 28);
    }

    span.PUR {
        background-color: rgba(147, 51, 234, 0.1);
        border: 1px solid rgba(147, 51, 234, 0.2);
        color: rgb(107, 33, 168);
    }

    span.GRN {
        background-color: rgba(34, 197, 94, 0.1);
        border: 1px solid rgba(34, 197, 94, 0.2);
        color: rgb(21, 128, 61);
    }

    span.BLU {
        background-color: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        color: rgb(29, 78, 216);
    }

    /* Tag Colors */
    span.YEL {
        background-color: rgba(234, 179, 8, 0.1);
        border: 1px solid rgba(234, 179, 8, 0.2);
        color: rgb(161, 98, 7);
    }

    span.RED {
        background-color: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.2);
        color: rgb(185, 28, 28);
    }

    span.PUR {
        background-color: rgba(147, 51, 234, 0.1);
        border: 1px solid rgba(147, 51, 234, 0.2);
        color: rgb(107, 33, 168);
    }

    span.GRN {
        background-color: rgba(34, 197, 94, 0.1);
        border: 1px solid rgba(34, 197, 94, 0.2);
        color: rgb(21, 128, 61);
    }

    span.BLU {
        background-color: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        color: rgb(29, 78, 216);
    }

    /* Actions */
    td a {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--bg-main);
        background-color: var(--bg-rd-1);
        border: 1px solid var(--bg-rd);
        border-radius: 0.375rem;
        text-decoration: none;
        transition: all 0.2s;
    }

    td a:hover {
        background-color: var(--bg-rd-2);
        border-color: var(--bg-rd-1);
    }

    /* Scrollbar */
    .table-container {
        overflow-x: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--bg-rd) transparent;
    }

    .table-container::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }

    .table-container::-webkit-scrollbar-track {
        background: transparent;
    }

    .table-container::-webkit-scrollbar-thumb {
        background-color: var(--bg-rd);
        border-radius: 3px;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

        .table-container {
            margin: 0 -1rem;
            border-radius: 0;
        }

        td,
        th {
            padding: 0.625rem 0.75rem;
        }
    }
</style>
