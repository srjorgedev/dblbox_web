---
import DashLayout from "../../../layouts/DashLayout.astro";
import { getCharacter, getData } from "../../../services/getData";
import { RARITY, COLORS, RARITY_BIG } from "../../../utils/atributes";
const { id } = Astro.params;

const character = await getCharacter(parseInt(id!));
const { abilities, arts, zenkaiAbilities, zenkaiArts, basic } = character;

const data = await getData();
const { chapter, color, rarity, tag, type } = data;
console.log({ color });
const charColor = COLORS[basic.color[0]._id];
const rar = RARITY[basic.rarity._id];
const charRarity = RARITY_BIG[basic.rarity._id];

console.log(basic);
---

<DashLayout selected={1}>
    <h1>Editar - {basic.name}</h1>
    <h2>Informaci√≥n basica</h2>
    <section>
        <article class="inputs">
            <div class="input-data">
                <label for="name">Nombre (Si es mas de uno, separar con ",")</label>
                <input type="text" name="name" id="name" value={basic.name} />
            </div>
            <div class="input-data">
                <label for="name">ID</label>
                <input type="text" name="_id" id="_id" value={basic._id} />
            </div>
            <div class="input-data">
                <label for="name">ID Numerico</label>
                <input type="text" name="num_id" id="num_id" value={basic.num} />
            </div>
        </article>
        <article class="character-data">
            {
                Array.from({ length: basic.states }).map((e, i) => {
                    return (
                        <select>
                            <option hidden value="">
                                Sin color
                            </option>
                            {color.map((f, g) => (
                                <option selected={basic.color[i] && f._id == basic.color[i]._id ? true : false} value={f._id}>
                                    {f.es}
                                </option>
                            ))}
                        </select>
                    );
                })
            }

            <select>
                <option hidden value="">Sin color</option>
                {
                    chapter.map((f, g) => (
                        <option selected={f._id == basic.chapter._id ? true : false} value={f._id}>
                            {f.es}
                        </option>
                    ))
                }
            </select>

            <select>
                <option hidden value="">Sin color</option>
                {
                    type.map((f, g) => (
                        <option selected={f._id == basic.type._id ? true : false} value={f._id}>
                            {f.es}
                        </option>
                    ))
                }
            </select>

            <select>
                <option hidden value="">Sin color</option>
                {
                    rarity.map((f, g) => (
                        <option selected={f._id == basic.rarity._id ? true : false} value={f._id}>
                            {f.es}
                        </option>
                    ))
                }
            </select>
        </article>
        <article class="character-tags">
            <label>Etiquetas</label>
            <div class="tags">
                {
                    basic.tags.map((e) => (
                        <span id={`tag-${e._id}`} class="tag" data-tag-id={e._id}>
                            {e.tag}
                        </span>
                    ))
                }
            </div>
        </article>
    </section>
</DashLayout>

<style>
    h1 {
        font-weight: 600;
        font-size: var(--font-size-lg);
        line-height: 1;
    }

    article.inputs {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 16px;
        margin-bottom: 16px;

        .input-data {
            display: flex;
            flex-direction: column;

            label {
                font-size: 1rem;
                color: #565656;
                margin-bottom: 8px;
            }

            input {
                font-size: 1.5rem;
                padding: 1rem;
                border-radius: 8px;
            }
        }
    }

    article.character-data {
        display: flex;
        width: 100%;
        gap: 16px;

        select {
            flex: 1;
            font-size: 1.25rem;
            padding: 1rem;
            border-radius: 8px;
        }
    }

    article.character-tags {
        width: 100%;
        display: flex;
        flex-direction: column;
        height: auto;

        label {
            font-size: 1rem;
            color: #565656;
            margin-bottom: 8px;
        }

        .tags {
            padding: 0.5rem;
            display: flex;
            background-color: var(--bg-nd-01);
            border: 2px solid var(--bg-nd-05);
            border-radius: 8px;
            align-items: center;
            gap: 8px;

            span {
                padding: 0.5rem 1rem;
                text-align: center;
                background-color: var(--bg-rd-1);
                border: 2px solid var(--bg-rd-2);
                border-radius: 4px;
            }
        }
    }
</style>
